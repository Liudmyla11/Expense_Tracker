package com.example.expensetracker

import android.os.Bundle
import android.widget.ImageButton
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.github.mikephil.charting.charts.PieChart
import com.github.mikephil.charting.data.PieEntry
import com.github.mikephil.charting.data.PieData
import com.github.mikephil.charting.data.PieDataSet
import com.github.mikephil.charting.formatter.PercentFormatter
import java.util.Locale

class StatisticsActivity : AppCompatActivity() {

    private lateinit var pieChart: PieChart

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_statistics)

        window.statusBarColor = ContextCompat.getColor(this, R.color.mainColor)

        val btnBack: ImageButton = findViewById(R.id.btnBack)
        btnBack.setOnClickListener { finish() }

        // –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–æ–∫—É –≤–∏—Ç—Ä–∞—Ç
        val expenses = intent.getSerializableExtra("expenses") as? ArrayList<Expense> ?: ArrayList()

        if (expenses.isEmpty()) {
            // —è–∫—â–æ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ, –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            Toast.makeText(this, "–î–∞–Ω—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ", Toast.LENGTH_SHORT).show()
            finish()
        } else {
            // —è–∫—â–æ –¥–∞–Ω—ñ —î, –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            val tvSelectedPeriod: TextView = findViewById(R.id.tvSelectedPeriod)
            val periodText = calculatePeriod(expenses)
            tvSelectedPeriod.text = periodText

            // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
            pieChart = findViewById(R.id.pieChart)

            // –º–∞–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏
            val existingCategories = mapOf(
                "üõÅ –î–æ–≥–ª—è–¥" to R.color.colorCare,
                "üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–∏" to R.color.colorGifts,
                "üè† –ë—É–¥–∏–Ω–æ–∫" to R.color.colorHome,
                "üéÆ –Ü–≥—Ä–∏" to R.color.colorGames,
                "üöï –¢–∞–∫—Å—ñ" to R.color.colorTaxi,
                "ü¶Æ –¢–≤–∞—Ä–∏–Ω–∏" to R.color.colorPets,
                "ü•ë –á–∂–∞" to R.color.colorFood,
                "üöó –ê–≤—Ç–æ–º–æ–±—ñ–ª—å" to R.color.colorCar,
                "‚úàÔ∏è –ü–æ–¥–æ—Ä–æ–∂—ñ" to R.color.colorTravel,
                "üé° –†–æ–∑–≤–∞–≥–∏" to R.color.colorEntertainment,
                "üíä –ó–¥–æ—Ä–æ–≤‚Äô—è" to R.color.colorHealth,
                "üìù –†–∞—Ö—É–Ω–∫–∏" to R.color.colorBills,
                "‚öΩÔ∏è –°–ø–æ—Ä—Ç" to R.color.colorSport
            )

            // —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º
            val filteredData = expenses.filter { it.category in existingCategories.keys }
            setupPieChart(filteredData, existingCategories)

            val aggregatedData = expenses.groupBy { it.category }
                .map { (category, expenseList) ->
                    category to expenseList.sumOf { it.amount }
                }
                .sortedByDescending { it.second }

            // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            val statisticsAdapter = StatisticsAdapter(aggregatedData)

            // –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è RecyclerView –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            val rvCategories: RecyclerView = findViewById(R.id.rvCategories)
            rvCategories.layoutManager = LinearLayoutManager(this)
            rvCategories.adapter = statisticsAdapter
        }
    }

    private fun calculatePeriod(expenses: List<Expense>): String {
        val inputDateFormat = java.text.SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
        val outputDateFormat = java.text.SimpleDateFormat("d MMM yyyy '—Ä.'", Locale("uk"))

        // —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –∑–∞ –¥–∞—Ç–∞–º–∏
        val sortedExpenses = expenses.sortedBy { it.date }

        val firstDate = sortedExpenses.first().date
        val lastDate = sortedExpenses.last().date

        // —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç —É –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        val formattedFirstDate = outputDateFormat.format(inputDateFormat.parse(firstDate)!!)
        val formattedLastDate = outputDateFormat.format(inputDateFormat.parse(lastDate)!!)

        return "$formattedFirstDate ‚Äî $formattedLastDate"
    }

    // –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
    private fun setupPieChart(filteredData: List<Expense>, categoryColors: Map<String, Int>) {
        val aggregatedData = filteredData.groupBy { it.category }
            .map { (category, expenseList) ->
                category to expenseList.sumOf { it.amount }
            }
            .sortedByDescending { it.second } // –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó

        val entries = ArrayList<PieEntry>()
        val colors = ArrayList<Int>()

        // –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –≤–∏—Ç—Ä–∞—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤
        val totalAmount = aggregatedData.sumOf { it.second }

        // –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
        for ((category, totalAmountForCategory) in aggregatedData) {
            val percentage = (totalAmountForCategory / totalAmount * 100).toFloat()
            entries.add(PieEntry(percentage, category)) // –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –¥–ª—è –ª–µ–≥–µ–Ω–¥–∏
            val colorRes = categoryColors[category] ?: R.color.colorOther
            colors.add(ContextCompat.getColor(this, colorRes))
        }

        val dataSet = PieDataSet(entries, null)
        dataSet.colors = colors
        dataSet.valueTextSize = 14f
        dataSet.valueTextColor = ContextCompat.getColor(this, R.color.selectedColor)

        val pieData = PieData(dataSet)
        pieData.setValueFormatter(PercentFormatter(pieChart))
        pieData.setDrawValues(true)

        // –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—ñ–∞–º–µ—Ç—Ä–∞ –æ—Ç–≤–æ—Ä—É
        pieChart.setHoleRadius(40f)
        pieChart.setTransparentCircleRadius(43f)

        // –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
        pieChart.data = pieData
        pieChart.description.isEnabled = false // –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–ø–∏—Å—É
        pieChart.setUsePercentValues(true) // –≤–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        pieChart.setDrawEntryLabels(false) // –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—ñ–≤ –Ω–∞ —Å–∞–º—ñ–π –¥—ñ–∞–≥—Ä–∞–º—ñ

        // –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–µ–≥–µ–Ω–¥–∏
        val legend = pieChart.legend
        legend.isEnabled = true // –≤–∫–ª—é—á–µ–Ω–Ω—è –ª–µ–≥–µ–Ω–¥–∏
        legend.textSize = 12f
        legend.textColor = ContextCompat.getColor(this, R.color.selectedColor)
        legend.form = com.github.mikephil.charting.components.Legend.LegendForm.CIRCLE // —Ñ–æ—Ä–º–∞ –º–∞—Ä–∫–µ—Ä—ñ–≤
        legend.formSize = 12f
        legend.horizontalAlignment = com.github.mikephil.charting.components.Legend.LegendHorizontalAlignment.RIGHT // –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–∞
        legend.verticalAlignment = com.github.mikephil.charting.components.Legend.LegendVerticalAlignment.CENTER // –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ
        legend.orientation = com.github.mikephil.charting.components.Legend.LegendOrientation.VERTICAL // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è

        pieChart.animateY(1000)
        pieChart.invalidate()
    }
}
